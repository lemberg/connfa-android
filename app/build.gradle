buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
        jcenter()
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.22.0'
        classpath 'com.novoda:build-properties-plugin:1.2.1'
    }
}

plugins {
    id 'com.onesignal.androidsdk.onesignal-gradle-plugin' version '0.8.0'
}
apply plugin: 'com.onesignal.androidsdk.onesignal-gradle-plugin'
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.novoda.build-properties'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    maven { url 'https://maven.google.com' }
}

buildProperties {
    application {
        file project.file('../team-props/application.properties')
    }
    secrets {
        file project.file('../team-props/secrets.properties')
    }
    releaseSigningConfig {
        file project.file('../team-props/releaseSigningConfig.properties')
    }
}

android {
    compileSdkVersion Integer.parseInt(project.COMPILE_SDK_VERSION)
    buildToolsVersion project.BUILD_TOOLS_VERSION

    defaultConfig {
        applicationId buildProperties.application['applicationId']
                .or(buildProperties.env['APPLICATION_ID'])
                .string
        minSdkVersion Integer.parseInt(project.MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(project.TARGET_SDK_VERSION)

        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName project.VERSION_NAME

        resValueString 'app_name', buildProperties.application['applicationName']
                .or('Connfa')
                .string

        manifestPlaceholders += [
                fabricApiKey: buildProperties.secrets['fabricApiKey']
                        .or(buildProperties.env['FABRIC_API_KEY'])
                        .string,

                onesignal_app_id: buildProperties.secrets['oneSignalKey']
                        .or("")
                        .string,

                onesignal_google_project_number: "REMOTE"
        ]

        resValueString 'api_value_twitter_api_key', buildProperties.secrets['twitterApiKey']
                .or(buildProperties.env['TWITTER_API_KEY'])
                .string

        resValueString 'api_value_twitter_secret', buildProperties.secrets['twitterSecret']
                .or(buildProperties.env['TWITTER_SECRET'])
                .string

        resValueString 'api_value_google_maps_api_key', buildProperties.secrets['googleMapsApiKey']
                .or(buildProperties.env['GOOGLE_MAPS_API_KEY'])
                .string

        resValueString 'api_value_base_url', buildProperties.secrets['baseUrl']
                .or(buildProperties.env['BASE_URL'])
                .string

        resValueString 'social_query', buildProperties.application['socialQuery']
                .or('#AndroidDev')
                .string

    }

    if (System.getenv('CI') == null) {
        signingConfigs {
            config {
                signingConfigProperties buildProperties.releaseSigningConfig
            }
        }

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                signingConfig signingConfigs.config
            }
        }
    }

    lintOptions {
        lintConfig file("$rootProject.projectDir/team-props/lint.xml")
        abortOnError false
    }
}

dependencies {
    compile project(':drupalSDK')

    compile libraries.app.annotations
    compile libraries.app.gson
    compile libraries.app.volley

    compile libraries.app.shadowLayout
    compile libraries.app.materialTabStrip
    compile libraries.app.parallaxScroll
    compile libraries.app.scaleImageView
    compile libraries.app.timber

    compile libraries.app.appCompat
    compile libraries.app.playAnalytics
    compile libraries.app.playMaps

    compile(libraries.app.crashlytics) {
        transitive = true
    }
    compile libraries.app.tweetUi
    compile libraries.app.oneSignal
}

apply plugin: 'com.google.gms.google-services'
